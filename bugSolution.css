The issue can be resolved in several ways:

1. **Increase Specificity:**  Make the selector for `.container div.special` more specific. This can be done by adding extra classes or using more precise selectors.  For example:
```css
.container div.special.important {
  width: 50px;
  background-color: lightcoral;
}
```
2. **Reorder Styles:** Move the style declaration for `.container div.special` *after* the conflicting declaration for `.container div`.  This works because later styles override previous styles with equal specificity.
```css
.container {
  width: 200px;
  background-color: lightblue;
}

.container div {
  width: 100px;
  background-color: lightgreen;
}

.container div {
  background-color: lightpink; 
}

.container div.special {
  width: 50px;
  background-color: lightcoral; 
}
```
3. **Use !important (Generally Discouraged):** As a last resort, you can use the `!important` flag, but this is generally discouraged as it can make your stylesheets harder to maintain and debug.  It forces the style to be applied, overriding other styles regardless of specificity.
```css
.container div.special {
  width: 50px;
  background-color: lightcoral !important; 
}
```
Choose the method that best suits your coding style and project requirements.  It's usually best to avoid `!important` and instead strive for well-structured and highly specific CSS selectors.